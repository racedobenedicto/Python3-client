#!/usr/bin/env python3

import gi, sys, threading,requests, json
#import lcddriver
gi.require_version('Gtk','3.0')
from gi.repository import Gtk, Gdk, GLib
sys.path.insert(0,'../MFRC522-python')
from Read2 import RfidMFRC522

user={"uid" : " ","name" : " ", "id" : 0}
table={"rows" : [], "name" : " ", "fields" : []}

#Definimos  la ventana principal como la clase UIDWindow
class UIDWindow(Gtk.Window):
	def __init__(self):
		Gtk.Window.__init__(self, title = "Course Manager")
		self.set_default_size(200,100)
		box = Gtk.Box(spacing = 6)
		self.add(box)
		box.show()
		#Pantalla de login
		self.login = Login(self)
		box.pack_start(self.login, True, True, 0)
		self.login.show_all()
		#Pantalla usuario logeado
		self.query = Query(self)
		box.pack_start(self.query, True, True, 0)

	#Funci贸n connexi贸n sql
	def sqlThread(self, query, action):
		global user
		global table
		#Solicitud a la BBDD, el resultado llega con estructura json
		link = "http://www.institutelpalau.net/gestin2/raquel/sql_client.php?"+query
		#link = "http://127.0.0.1:3000/"+query
		if (user["id"] != 0):
			link = link + "&idStudent=" + user["id"]

		result = requests.get(link)
		result = json.loads(result.content)

		if(action == "logear"):
			if(result["state"] == "success"):
				user["name"] = result["name"]
				user["id"] = result["student_id"]
				GLib.idle_add(self.query.labelS.set_text, user["name"])
				GLib.idle_add(self.login.hide)
				GLib.idle_add(self.query.show_all)
			else:
				GLib.idle_add(self.login.label.set_name,"loginError")
				GLib.idle_add(self.login.label.set_text, "Bad login, try again")
		if(action == "query"):
			if(result["state"] == "success"):
				table["name"] = result["nameTable"]
				table["rows"] = result["data"]
				table["fields"] = result["fields"]
			else:
				table["name"] = result["message"] + " Try Again!"
				table["rows"] = []
			GLib.idle_add(self.query.showTable)
		if(action == "logout"):
			#Cerrar base de datos
			user["id"] = 0;
			print("Sortir")
			print("Press 'Ctrl+Z' to exit")

class Login(Gtk.Box):
	def __init__(self, parent_window):
		Gtk.Box.__init__(self,spacing = 20)
		self.parent_window = parent_window
		self.boxV = Gtk.VBox(spacing = 10)
		self.pack_start(self.boxV, True, True, 0)
		self.boxV.override_background_color(0, Gdk.RGBA(0, 200, 255, 0.7))

		textL = "Please, login with your university card"
		self.label = Gtk.Label(textL)
		self.label.set_size_request(200,50)
		self.label.set_name("login")
		self.boxV.pack_start(self.label, False, False, 0)
		"""
		#LCD
		dis = lcddriver.lcd()
		dis.lcd_display_string("Please, login with", 1)
		dis.lcd_display_string("your university card", 2)
		"""
		#Cuadro de c贸digo para poder poner el c贸digo
		self.entryUID = Gtk.Entry()
		self.entryUID.connect("activate", self.logear)
		self.boxV.pack_start(self.entryUID, True, False, 0)
		#Para que pueda leer la tarjeta
		threading.Thread(target = self.RfidThread, daemon = True).start()

	def logear(self, widget):
		global user
		user["uid"] = self.entryUID.get_text()
		loginThread = threading.Thread(target = self.parent_window.sqlThread, args = ("login?student_id="+user["uid"], "logear"))
		loginThread.setDaemon(True)
		loginThread.start()

	def RfidThread(self):
		rf = RfidMFRC522()
		global user
		#user["uid"] = rf.read_uid()
		#dis = lcddriver.lcd()

		#rfidThread = threading.Thread(target = self.parent_window.sqlThread, args = ("login?student_id="+user["uid"], "logear"))
		#rfidThread.setDaemon(True)
		#rfidThread.start()

class Query(Gtk.Box):
	def __init__(self,parent_window):
		Gtk.Box.__init__(self, orientation = Gtk.Orientation.VERTICAL, spacing = 30)
		self.parent_window = parent_window
		self.vBox = Gtk.VBox(spacing = 10)
		self.hBox = Gtk.HBox(spacing = 10)
		self.add(self.vBox)
		self.vBox.pack_start(self.hBox, False, True,0)
		self.labelW = Gtk.Label(label="Welcome")
		self.labelS = Gtk.Label(user["name"])
		self.hBox.pack_start(self.labelW, False, True, 0)
		self.hBox.pack_start(self.labelS, False, True, 0)
		"""
		#LCD
		dis = lcddriver.lcd()
		dis.lcd_clear()
		dis.lcd_display_string("Welcome", 1)
		dis.lcd_display_string(user["name"], 2)
		"""
		self.buttonLogout = Gtk.Button("Logout")
		self.buttonLogout.connect("clicked", self.logout)
		self.hBox.pack_start(self.buttonLogout, False, True, 0)

		self.entryQuery = Gtk.Entry()
		self.vBox.pack_start(self.entryQuery, False, True, 0)
		self.entryQuery.connect("activate", self.processQuery)

		self.table = Gtk.Grid(row_spacing=2)
		self.nameTable = Gtk.Label()
		self.vBox.pack_start(self.nameTable, True, True,0)

	def logout(self, buttonLogout):
		logoutThread = threading.Thread(target = self.parent_window.sqlThread, args = ("logout", "logout"))
		logoutThread.setDaemon(True)
		logoutThread.start()
		self.parent_window.destroy()
		win = UIDWindow()
		win.connect("destroy", Gtk.main_quit)
		win.show()
		Gtk.main()

	def processQuery(self, widget):
		self.table.destroy()
		queryThread = threading.Thread(target = self.parent_window.sqlThread, args = (self.entryQuery.get_text(), "query"))
		queryThread.setDaemon(True)
		queryThread.start()

	def showTable(self):
		global table
		nameTable = table["name"]
		rows = table["rows"]
		self.nameTable.set_label(nameTable)
		columns = table['fields']
		self.table.set_column_homogeneous(True)
		self.vBox.pack_start(self.table, True, True, 0)

		for i in range(len(columns)):
			tableHeader = Gtk.Label(label = columns[i])
			self.table.attach(tableHeader, i, 0, 1, 1)
		for i in range(len(rows)):
			for j in range(len(columns)):
				tableContent = Gtk.Label(label = rows[i][j])
				self.table.attach(tableContent, j, i+1, 1, 1)
		self.table.show_all()
		table["name"] = " "
		table["rows"] = []
		table["fields"] = []

if __name__ == "__main__":
	window = UIDWindow()
	window.show()
	Gtk.main()
